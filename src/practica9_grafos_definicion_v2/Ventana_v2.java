/* UNIVERSIDAD DE PAMPLONA
    Ingeniería de Sistemas - Matemáticas discretas: Grafos
    M.Sc. Luis Armando Portilla Granados
    Actualizado octubre de 2022: ArrayList
 */
package practica9_grafos_definicion_v2;

//import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Mariana
 */
public class Ventana_v2 extends javax.swing.JFrame {

    static final int t = 20;  // tamaño
//    static Nodos_v2[] nodos = new Nodos_v2[t];
//    static Aristas_v2 aristas[] = new Aristas_v2[t*2];    

    static ArrayList<Nodos_v2> nodos = new ArrayList();
    static ArrayList<Aristas_v2> aristas = new ArrayList();

//    static int n = nodos.size();
    static int[][] matrizAd = new int[t][t]; // cambia tamaño
    static int[][] matrizIn = new int[t][t * (t - 1) / 2]; // posibles aristas

    Nodos_v2 nodoSelec1 = null;

    Nodos_v2 nodoSelec2 = null;

    /**
     * Creates new form ventana
     */
    public Ventana_v2() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/grafoIcon.png")).getImage());
        //setLocation(400, 100);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matemáticas discretas - Grafos");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Caminos"));

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Grafo"));
        jPanel2.setPreferredSize(new java.awt.Dimension(365, 365));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 359, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Instrucciones"));

        jLabel1.setText("NODOS:  Agrega nodos haciendo clic sobre el panel \"Grafo\""); // NOI18N

        jLabel2.setText("ARISTAS: Agrega aristas haciendo clic derecho  sobre el par de nodos que va a unir "); // NOI18N

        jLabel3.setText("CAMINOS: Digita el camino separando cada nodo con una coma (,)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Matriz de adyacencia"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Matriz de incidencia"));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Definición del grafo"));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(80, 117));

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jButton1.setText("Nuevo grafo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Encontrar caminos");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setText("Repintar aristas");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(64, 64, 64)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(19, 19, 19))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Define a G(V,E)
    static String definicion(ArrayList<Nodos_v2> nodo, ArrayList<Aristas_v2> arista) {
        String cadena = "V = { ";
        if (!nodo.isEmpty()) {
            for (int i = 0; i < nodo.size() - 1; i++) { // recorre todos los nodos sin el último
                cadena += nodo.get(i).getNombreN() + ", ";
            }
            cadena += nodo.get(nodo.size() - 1).getNombreN(); // concadena el último nodo
        }
        cadena += " }\nA = { "; // cierra el conjunto V } y abre el conjungo A={ en otra línea
        if (!arista.isEmpty()) {
            for (int i = 0; i < arista.size() - 1; i++) { // recorre todos las aristas sin la última
                cadena += arista.get(i).getNombreA() + ", ";
            }
            cadena += arista.get(arista.size() - 1).getNombreA();// concadena la última arista
        }
        cadena += " }";
        return cadena;
    }

    // se encadena texto con las colmunas y filas + contenido de la matrizAd de adyacencia
    static String mostrarAd(int m[][]) {
        String cadena = "";
        char filas = 65;
        char columnas = 65;
        for (int k = 65; k < (65 + nodos.size()); k++) { //concadena títulos de columnas (A, B, ...)
            cadena += "\t" + columnas;  // 3 espacios entre columna o \t
            columnas++;
        }
        cadena += "\n";
        for (int i = 0; i < nodos.size(); i++) {
            cadena += filas + "\t";  //concadena los títulos de las filas
            for (int j = 0; j < nodos.size(); j++) {
                cadena += String.valueOf(m[i][j]) + "\t"; //contadena las relaciones (0,1) en String
            }
            filas++;
            cadena = cadena + "\n";
        }
        return (cadena);
    }

    // se encadena texto con las colmunas y filas + contenido de la matrizAd de adyacencia
    static String mostrarIn(int m[][], ArrayList<Aristas_v2> arista) {
        String cadena = "";
        char filas = 65;
        if (!arista.isEmpty()) {
            for (int i = 0; i < nodos.size(); i++) {
                cadena += "\t" + arista.get(i).getNombreA();
            }
        }
        cadena += "\n";
        for (int i = 0; i < nodos.size(); i++) {
            cadena += filas + "\t";
            for (int j = 0; j < aristas.size(); j++) {
                cadena += String.valueOf(m[i][j]) + "\t ";
            }
            filas++;
            cadena = cadena + "\n";
        }
        return (cadena);
    }

    static int buscaIndiceNodo(ArrayList<Nodos_v2> nodo, String h) {
        for (int i = 0; i < nodos.size(); i++) {
            //equalsIgnoreCase() Compara dos strings para ver si son iguales
            //ignorando las diferencias entre mayúsculas y minúsculas
            if (nodo.get(i).getNombreN().equalsIgnoreCase(h)) {
                return i;
            }
        }
        return -1;
    }

    static Nodos_v2 buscaNodo(ArrayList<Nodos_v2> nodo, int xx, int yy) {
        for (int i = 0; i < nodos.size(); i++) {
            int x = nodo.get(i).getX();
            int y = nodo.get(i).getY();
            int radio = nodo.get(i).getD() + 7;
            if (xx > (x - radio) && xx < (x + radio) && yy > (y - radio) && yy < (y + radio)) {
                return nodo.get(i);
            }
        }
        return null;
    }

    // Comprueba si existe una arista unida a dos nodos
    boolean buscarArista(Nodos_v2 n1, Nodos_v2 n2) {
        for (Aristas_v2 arista : aristas) {
            if (arista != null) {
                boolean a = arista.getN1().equals(n1), b = arista.getN2().equals(n2);
                boolean c = arista.getN2().equals(n1), d = arista.getN1().equals(n2);
                if ((a && b) || (c && d)) {
                    return true;
                }
            }
        }
        return false;
    }

    // Comprueba si una arista pertenece a un nodo
//    static int comprobarNodoArista(Nodos_v2 n, Aristas_v2 a) {
//        if (a != null && a.getN1().equals(n) || a.getN2().equals(n)) {
//            return 1;
//        }
//        return 0;
//    }
    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        if (SwingUtilities.isLeftMouseButton(evt)) {
            if (buscaNodo(nodos, x, y) == null) {
                Nodos_v2 nodo = new Nodos_v2(x, y, nodos.size());
                nodo.pintarNodo(jPanel2.getGraphics());
                nodos.add(nodo);

                jTextArea1.setText(mostrarAd(matrizAd));
                jTextArea1.setEditable(false);
//                    jTextArea2.setText(mostrarIn(matrizIn, aristas));
//                    jTextArea2.setEditable(false);
                jTextArea3.setText(definicion(nodos, aristas));
                jTextArea3.setEditable(false);
            } else {
                JOptionPane.showMessageDialog(null, "Ya existe un nodo en esta área");
            }
        }
        if (SwingUtilities.isRightMouseButton(evt)) {
            Nodos_v2 n = buscaNodo(nodos, x, y);
            if (n != null) {
                if (nodoSelec1 == null) {
                    nodoSelec1 = n;
                } else if (nodoSelec2 == null && !n.equals(nodoSelec1)) {
                    nodoSelec2 = n;
                    // controla que no se repita la arista con un método buscarArista
                    if (!buscarArista(nodoSelec1, nodoSelec2)) {
//                        try {
                        int xx = buscaIndiceNodo(nodos, nodoSelec1.getNombreN());
                        int yy = buscaIndiceNodo(nodos, nodoSelec2.getNombreN());

                        matrizAd[xx][yy] = 1;
                        matrizAd[yy][xx] = 1;

//                            matrizIn[xx][aristas.size()] = 1;
//                            matrizIn[yy][aristas.size()] = 1;
                        Aristas_v2 arista = new Aristas_v2(nodoSelec1, nodoSelec2);
                        aristas.add(arista);
                        arista.pintarArista(jPanel2.getGraphics()); // Graphics
                        //arista.pintarArista((Graphics2D) jPanel2.getGraphics());
//                        } catch (Exception e) {
//                            JOptionPane.showMessageDialog(null, "error");
//                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ya existe una arista entre los nodos seleccionados");
                    }

                    jTextArea1.setText(mostrarAd(matrizAd));
                    jTextArea1.setEditable(false);

//                    jTextArea2.setText(mostrarIn(matrizIn, aristas));
//                    jTextArea2.setEditable(false);
                    jTextArea3.setText(definicion(nodos, aristas));
                    jTextArea3.setEditable(false);
                    nodoSelec1 = null;
                    nodoSelec2 = null;
                }
            }
        }
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jPanel2.removeAll();
        jPanel2.repaint();
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
        jTextArea4.setText("");

        nodos = new ArrayList();
        aristas = new ArrayList();
        matrizAd = new int[t][t];
        matrizIn = new int[t][t * (t - 1) / 2];
        nodoSelec1 = null;
        nodoSelec2 = null;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 0; i < aristas.size(); i++) {
                aristas.get(i).repintarArista(jPanel2.getGraphics()); // Graphics
                //aristas[i].repintarArista((Graphics2D) jPanel2.getGraphics());
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //ENCONTRAR CAMINOS
        //Declaramos dos arrayList de tipo nodo y aristas y una cola de tipo nodo
        ArrayList<Nodos_v2> nodoscamino = new ArrayList();
        ArrayList<Aristas_v2> aristasvisitadas = new ArrayList();
        Queue<Nodos_v2> colanodos = new LinkedList();
        //Repintamos todas las aristas para se quite el azul de la arista pintada una vez que querramos encontrar otro camino
        for (int i = 0; i < aristas.size(); i++) {
            aristas.get(i).pintarArista(jPanel2.getGraphics());
            }
        String caminos = ""; //Guarda el nombre del camino y lo imprimimos en el cuadro de texto
        String cadena = JOptionPane.showInputDialog(null, "Digita el camino separado por comas (,)");
        //split() divide un objeto de tipo String en un array (vector) de cadenas mediante la separación de la cadena en subcadenas.
        String[] lista = cadena.toUpperCase().split(","); //Guardamos los nodos en un array
        boolean esSimple = true;
        boolean noRecorrido = false;
        //RECORREMOS TODOS LOS NODOS Y DEPENDIENDO DEL CAMINO DIGITADO GUARDAMOS ESOS NODOS EN NODOCAMINOS Y COLANODOS 
        for (int p = 0; p < lista.length; p++) {
            for (int k = 0; k < nodos.size(); k++) {
                //Evaluamos si la posicion del nodo.get es igual a la posicion de la lista[p]
                if (lista[p].equals(nodos.get(k).getNombreN())) {
                    if (nodoscamino.contains(nodos.get(k))) {//Si el array nodoscamino ya contiene a la posicion nodos.get que entre para que cambie el valor de es esSimple a false
                        if (!nodos.get(k).getNombreN().equals(nodos.get(0).getNombreN())) { //Si al posicion de nodos.get es igual a la primera posicion del nodo sigue siendo simple si el nodo final es igual al inicial
                            esSimple = false;
                        }
                    }
                    caminos = caminos + nodos.get(k).getNombreN(); //Concatenamos y mostramos en jTextArea
                    nodoscamino.add(nodos.get(k));  //Los agregamos a un arreglo
                    colanodos.offer(nodos.get(k));  //Los agregamos a una cola
                }
            }
        }
        int longitud = 0;
        boolean esCerrado = false;
        Nodos_v2 cerrado = nodoscamino.get(0); //Nodo inicial se utilizará más adelante para verificar si es camino cerrado
        for (int i = 0; i < nodoscamino.size(); i++) { //Recorre todos los nodos que están en nodoscamino           
            boolean camino = false;
            colanodos.remove(); //pasamos al segundo nodo del camino
            if (colanodos.size() == 0) { //Cuando ya dibujamos todos los caminos break al for
                JOptionPane.showMessageDialog(null, "Fin del camino y su longitud es " + longitud);
                jTextArea4.setText("Camino: " + caminos);
                jTextArea4.setEditable(false);
                jTextArea4.append("\nLongitud: " + longitud);
                if (esSimple == false) { //Simple
                    jTextArea4.append("\nEl camino no es simple");
                } else {
                    jTextArea4.append("\nEl camino es simple"); 
                }
                if (noRecorrido == true) {//Recorrido
                    jTextArea4.append("\nEl camino no es recorrido");
                } else {
                    jTextArea4.append("\nEl camino es recorrido");
                }
                if (esCerrado == true) {//Cerrado
                    jTextArea4.append("\nEl camino es cerrado");
                } else {
                    jTextArea4.append("\nEl camino no es cerrado");
                }
                if (esCerrado == true && esSimple == true && nodos.size() >= 3) { //Camino ciclo es: Camino cerrado que además es camino simple. nodos>3
                    jTextArea4.append("\nEl camino es ciclo");
                } else {
                    jTextArea4.append("\nEl camino no es ciclo");
                }
                break;
            }
            //Al comparar el primer nodo <cerrado> con el ultimo nodo colanodos.size() == 1 si son iguales es cerrado
            if (colanodos.size() == 1) {
                if (cerrado.getNombreN().equals(colanodos.peek().getNombreN())) {
                    esCerrado = true;
                }
            }
            //recorremos todas las aristas para buscar el camino
            for (int j = 0; j < aristas.size(); j++) {
                //Comparamos el primer nodo <nodoscamino> con el segundo nodo del camino <colanodos>
                if (aristas.get(j).getN1().getNombreN().equals(nodoscamino.get(i).getNombreN()) && aristas.get(j).getN2().getNombreN().equals(colanodos.peek().getNombreN())
                        || aristas.get(j).getN1().getNombreN().equals(colanodos.peek().getNombreN()) && aristas.get(j).getN2().getNombreN().equals(nodoscamino.get(i).getNombreN())) {
                    aristas.get(j).repintarArista(jPanel2.getGraphics()); //Repintamos la arista
                    if (aristasvisitadas.contains(aristas.get(j))) { //Si encuentra una arista que ya esté contenida noRecorrido es TRUE o sea no es recorrido
                        noRecorrido = true;
                    }
                    aristasvisitadas.add(aristas.get(j));//Guardamos la arista
                    longitud++; //Se suma la longitud por cada arista dibujada
                    camino = true; //Cuando encuentra la arista cambia a true
                }
            }
            //Sino encuentra la arista con camino = true entonces no es camino por lo cual camino sigue en false y detiene el codigo
            if (camino == false) {
                JOptionPane.showMessageDialog(null, "NO es camino");
                break;
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana_v2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    // End of variables declaration//GEN-END:variables
}
